{"ast":null,"code":"export default {\n  props: {\n    value: Number,\n    readonly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      isFocused: false\n    };\n  },\n  computed: {\n    displayFormattedValue() {\n      if (this.value) {\n        return `$ ${new Intl.NumberFormat(\"en-US\").format(this.value)}`;\n      } else {\n        return \"\";\n      }\n    },\n    displayValue() {\n      return this.isFocused ? this.value.toString() : this.displayFormattedValue;\n    }\n  },\n  methods: {\n    focus() {\n      // Avoid annoying re-selecting of the text value\n      if (!this.isFocused && !this.readonly) {\n        this.isFocused = true;\n\n        // select all content for easy-overwriting\n        const el = this.$refs.thisInput;\n        // using nextTick to wait for the editing value to drop in\n        this.$nextTick(() => el.select());\n      }\n    },\n    blur(e) {\n      this.$emit(\"blur\", e);\n      this.isFocused = false;\n    },\n    setNewValue(val) {\n      // only change the value if the user is intentionally changing it\n      // (otherwise it may be emitting the displayFormattedValue as the new value)\n      const valJustNumbers = parseInt(val.replace(/[^\\d]/g, \"\"));\n\n      // also only if the value is really a number\n      if (this.isFocused) {\n        if (valJustNumbers) {\n          this.$emit(\"input\", valJustNumbers);\n        } else {\n          this.$emit(\"input\", 0);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["props","value","Number","readonly","type","Boolean","default","data","isFocused","computed","displayFormattedValue","Intl","NumberFormat","format","displayValue","toString","methods","focus","el","$refs","thisInput","$nextTick","select","blur","e","$emit","setNewValue","val","valJustNumbers","parseInt","replace"],"sources":["src/components/misc/DollarFormatInput.vue"],"sourcesContent":["<template>\r\n  <input\r\n    type=\"text\"\r\n    autocomplete=\"off\"\r\n    class=\"numeric\"\r\n    :readonly=\"readonly\"\r\n    @input=\"setNewValue($event.target.value)\"\r\n    :value=\"displayValue\"\r\n    @focus=\"focus\"\r\n    @blur=\"blur\"\r\n    ref=\"thisInput\"\r\n  />\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    value: Number,\r\n    readonly: { type: Boolean, default: false }\r\n  },\r\n  data() {\r\n    return {\r\n      isFocused: false\r\n    };\r\n  },\r\n  computed: {\r\n    displayFormattedValue() {\r\n      if (this.value) {\r\n        return `$ ${new Intl.NumberFormat(\"en-US\").format(this.value)}`;\r\n      } else {\r\n        return \"\";\r\n      }\r\n    },\r\n    displayValue() {\r\n      return this.isFocused ? this.value.toString() : this.displayFormattedValue;\r\n    }\r\n  },\r\n  methods: {\r\n    focus() {\r\n      // Avoid annoying re-selecting of the text value\r\n      if (!this.isFocused && !this.readonly) {\r\n        this.isFocused = true;\r\n\r\n        // select all content for easy-overwriting\r\n        const el = this.$refs.thisInput;\r\n        // using nextTick to wait for the editing value to drop in\r\n        this.$nextTick(() => el.select());\r\n      }\r\n    },\r\n    blur(e) {\r\n      this.$emit(\"blur\", e);\r\n      this.isFocused = false;\r\n    },\r\n    setNewValue(val) {\r\n      // only change the value if the user is intentionally changing it\r\n      // (otherwise it may be emitting the displayFormattedValue as the new value)\r\n      const valJustNumbers = parseInt(val.replace(/[^\\d]/g, \"\"));\r\n\r\n      // also only if the value is really a number\r\n      if (this.isFocused) {\r\n        if (valJustNumbers) {\r\n          this.$emit(\"input\", valJustNumbers);\r\n        } else {\r\n          this.$emit(\"input\", 0);\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"AAeA;EACAA,KAAA;IACAC,KAAA,EAAAC,MAAA;IACAC,QAAA;MAAAC,IAAA,EAAAC,OAAA;MAAAC,OAAA;IAAA;EACA;EACAC,KAAA;IACA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACAC,sBAAA;MACA,SAAAT,KAAA;QACA,gBAAAU,IAAA,CAAAC,YAAA,UAAAC,MAAA,MAAAZ,KAAA;MACA;QACA;MACA;IACA;IACAa,aAAA;MACA,YAAAN,SAAA,QAAAP,KAAA,CAAAc,QAAA,UAAAL,qBAAA;IACA;EACA;EACAM,OAAA;IACAC,MAAA;MACA;MACA,UAAAT,SAAA,UAAAL,QAAA;QACA,KAAAK,SAAA;;QAEA;QACA,MAAAU,EAAA,QAAAC,KAAA,CAAAC,SAAA;QACA;QACA,KAAAC,SAAA,OAAAH,EAAA,CAAAI,MAAA;MACA;IACA;IACAC,KAAAC,CAAA;MACA,KAAAC,KAAA,SAAAD,CAAA;MACA,KAAAhB,SAAA;IACA;IACAkB,YAAAC,GAAA;MACA;MACA;MACA,MAAAC,cAAA,GAAAC,QAAA,CAAAF,GAAA,CAAAG,OAAA;;MAEA;MACA,SAAAtB,SAAA;QACA,IAAAoB,cAAA;UACA,KAAAH,KAAA,UAAAG,cAAA;QACA;UACA,KAAAH,KAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}